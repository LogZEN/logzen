// Generated by CoffeeScript 1.3.3

/*
Copyright 2012 Sven Reissmann <sven@0x80.io>

This file is part of pyLogView. It is licensed under the terms of the
GNU General Public License version 3. See <http://www.gnu.org/licenses/>.
*/


(function() {
  var EventListModel, EventModel, evlist,
    _this = this;

  EventModel = (function() {

    function EventModel(data) {
      var _this = this;
      this.id = data._id;
      this.timegenerated = data._source.timegenerated;
      this.timereported = data._source.timereported;
      this.facility = data._source.facility;
      this.facilityName = ko.computed(function() {
        return Defaults.facility[_this.facility];
      });
      this.severity = data._source.severity;
      this.severityName = ko.computed(function() {
        return Defaults.severity[_this.severity];
      });
      this.detail_url = "/event/" + data._id;
      this.host = data._source.hostname;
      this.program = data._source.program;
      this.message = data._source.message;
    }

    return EventModel;

  })();

  EventListModel = (function() {

    function EventListModel() {
      this.events = ko.observableArray([]);
      this.loading = ko.observable(false);
    }

    EventListModel.prototype.getFilters = function() {
      var result,
        _this = this;
      result = {};
      $('.filter').each(function(index, element) {
        if ($(element).val() !== "") {
          return result[$(element).attr('name')] = $(element).val();
        }
      });
      if (JSON.stringify(result) === "{}") {
        return {
          "match_all": {}
        };
      } else {
        return {
          "term": result
        };
      }
    };

    EventListModel.prototype.loadEvents = function() {
      var es_query,
        _this = this;
      es_query = {
        "query": evlist.getFilters(),
        "facets": {
          "range1": {
            "range": {
              "field": "timereported",
              "ranges": [
                {
                  "from": 2012,
                  "to": 2012
                }
              ]
            }
          },
          "histo1": {
            "date_histogram": {
              "field": "timereported",
              "interval": "day"
            }
          }
        }
      };
      return $.ajax({
        url: $('#filterform').attr('action'),
        type: 'POST',
        contentType: "application/json",
        data: JSON.stringify(es_query),
        dataType: 'json',
        beforeSend: function() {
          return _this.loading(true);
        },
        success: function(result) {
          var event;
          _this.events((function() {
            var _i, _len, _ref, _results;
            _ref = result.hits.hits;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              event = _ref[_i];
              _results.push(new EventModel(event));
            }
            return _results;
          })());
          return _this.loading(false);
        }
      });
    };

    EventListModel.prototype.plotGraph = function(data, tickrange) {
      var options, plot;
      return plot = $.plot($('#chartdiv'), [data], options = {
        xaxis: {
          ticks: tickrange
        },
        bars: {
          show: true,
          lineWidth: 1,
          fill: true,
          fillColor: {
            colors: ["#729fcf", "#3465af"]
          }
        },
        grid: {
          hoverable: true,
          autoHighlight: true
        },
        tooltip: true,
        tooltipOpts: {
          content: "%y",
          defaultTheme: false
        },
        colors: ["#204a87"],
        selection: {
          mode: "x"
        }
      });
    };

    return EventListModel;

  })();

  evlist = new EventListModel;

  evlist.plotGraph([[0, 0], [0, 0]], []);

  evlist.loadEvents();

  $('#filterform').bind('keyup', function(event) {
    return evlist.loadEvents();
  });

  $(".clear-addon").each(function(index, element) {
    return $(element).bind('click', function(event) {
      $("#filter_" + $(element).attr("id")).val("");
      return evlist.loadEvents();
    });
  });

  $("#chartdiv").bind('plotselected', function(event) {
    return evlist.loadEvents();
  });

  ko.applyBindings(evlist);

}).call(this);
