// Generated by CoffeeScript 1.3.3

/*
Copyright 2012 Sven Reissmann <sven@0x80.io>

This file is part of pyLogView. It is licensed under the terms of the
GNU General Public License version 3. See <http://www.gnu.org/licenses/>.
*/


(function() {
  var EventListModel, EventModel, evlist, pivot,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  pivot = function(key, value, data) {
    var result;
    result = {};
    result[data[key]] = data[value];
    return result;
  };

  EventModel = (function() {

    function EventModel(data) {
      this.id = data._id;
      this.timegenerated = data._source.timegenerated;
      this.timereported = data._source.timereported;
      this.facility = data._source.facility;
      this.severity = data._source.severity;
      this.detail_url = "/event/" + data._id;
      this.host = data._source.hostname;
      this.program = data._source.program;
      this.message = data._source.message;
    }

    return EventModel;

  })();

  EventListModel = (function() {

    function EventListModel() {
      this.clearFilter = __bind(this.clearFilter, this);

      this.setFilter = __bind(this.setFilter, this);

      var _this = this;
      this.events = ko.observableArray([]);
      this.loading = ko.observable(false);
      this.error = ko.observable(null);
      this.filters = {
        'severity': ko.observable(""),
        'facility': ko.observable(""),
        'host': ko.observable(""),
        'program': ko.observable(""),
        'message': ko.observable("")
      };
      this.filledFilters = ko.computed(function() {
        var filter, name, _ref, _results;
        _ref = _this.filters;
        _results = [];
        for (name in _ref) {
          filter = _ref[name];
          if (filter() !== "") {
            _results.push({
              'name': name,
              'value': filter()
            });
          }
        }
        return _results;
      });
      this.query = ko.computed(function() {
        var filter;
        return {
          "query": {
            "match_all": {}
          },
          "filters": _this.filledFilters().length > 0 ? {
            "and": (function() {
              var _i, _len, _ref, _results;
              _ref = this.filledFilters();
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                filter = _ref[_i];
                _results.push({
                  'prefix': pivot('name', 'value', filter)
                });
              }
              return _results;
            }).call(_this)
          } : {},
          "from": 0,
          "size": 50,
          "sort": []
        };
      });
      this.loadEvents = ko.computed(function() {
        return $.ajax({
          url: $('#filterform').attr('action'),
          type: 'POST',
          contentType: "application/json",
          data: JSON.stringify(_this.query()),
          dataType: 'json',
          beforeSend: function() {
            return _this.loading(true);
          },
          success: function(result) {
            var event;
            _this.events((function() {
              var _i, _len, _ref, _results;
              _ref = result.hits.hits;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                event = _ref[_i];
                _results.push(new EventModel(event));
              }
              return _results;
            })());
            _this.error(null);
            return _this.loading(false);
          },
          error: function(jqXHR, status, error) {
            _this.events([]);
            _this.error(error);
            return _this.loading(false);
          }
        });
      });
    }

    EventListModel.prototype.setFilter = function(name) {
      var _this = this;
      return function(el) {
        return _this.filters[name](el[name]);
      };
    };

    EventListModel.prototype.clearFilter = function(name) {
      var _this = this;
      return function() {
        return _this.filters[name](null);
      };
    };

    EventListModel.prototype.timeSeries = function(data) {
      var chart;
      chart = nv.models.multiBarTimeSeriesChart().x(function(d) {
        return d.time;
      }).y(function(d) {
        return d.count;
      });
      chart.xAxis.tickFormat(function(d) {
        return d3.time.format('%x')(new Date(d));
      }).rotateLabels(-45);
      chart.yAxis.tickFormat(d3.format(',.0f'));
      chart.tooltip = function(key, x, y, e, graph) {
        return "<h3>" + key + "</h3><p>" + y + " during " + x + "</p>";
      };
      d3.select('#timeSeries svg').datum([
        {
          "key": "events",
          "values": data
        }
      ]).transition().duration(100).call(chart);
      return nv.utils.windowResize(chart.update);
    };

    return EventListModel;

  })();

  evlist = new EventListModel;

  ko.applyBindings(evlist);

}).call(this);
