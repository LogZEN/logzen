// Generated by CoffeeScript 1.6.3
/*
Copyright 2013 Sven Reissmann <sven@0x80.io>

This file is part of LogZen. It is licensed under the terms of the
GNU General Public License version 3. See <http://www.gnu.org/licenses/>.
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require.config({
    urlArgs: 'v=' + new Date(),
    baseUrl: '/js',
    paths: {
      jquery: 'libs/jquery-2.0.3',
      knockout: 'libs/knockout-2.3.0',
      pager: 'libs/pager-1.0.1.min',
      bootstrap: 'libs/bootstrap',
      vars: 'vars',
      text: 'libs/text'
    }
  });

  this.requireVM = function(module) {
    return function(callback) {
      return require(["/pages/" + module + "/model.js"], function(vm) {
        return callback(new vm);
      });
    };
  };

  this.requireHTML = function(module) {
    return function(page, callback) {
      return require(["text!/pages/" + module + "/view.html"], function(html) {
        $(page.element).html(html);
        return callback();
      });
    };
  };

  require(['jquery', 'knockout', 'pager', 'bootstrap'], function($, ko, pager) {
    var VM, vm;
    VM = (function() {
      function VM() {
        this.add_evlist = __bind(this.add_evlist, this);
        this.remove_evlist = __bind(this.remove_evlist, this);
        this.isLoggedIn = __bind(this.isLoggedIn, this);
        var _this = this;
        this.loading = ko.observable(false);
        this.configured = ko.observable(false);
        this.ui_displayMainMenu = ko.computed(function() {
          return _this.configured() === true && _this.username() !== "";
        });
        this.username = ko.observable("");
        this.evlists = ko.observableArray([
          {
            id: +(new Date()),
            title: ko.observable('Eventlist')
          }
        ]);
      }

      VM.prototype.isLoggedIn = function(page, route, callback) {
        var _this = this;
        return $.ajax({
          url: '/_auth/getlogin',
          dataType: 'json',
          success: function(result) {
            if (result.success === true) {
              _this.username(result.username);
              return callback();
            } else {
              return window.location.href = "/#system/login";
            }
          },
          error: function(jqXHR, status, error) {
            _this.error(error);
            return window.location.href = "/#system/login";
          }
        });
      };

      VM.prototype.logout = function() {
        var _this = this;
        return $.ajax({
          url: '/_auth/logout',
          dataType: 'json',
          success: function(result) {
            return window.location.href = "/";
          }
        });
      };

      VM.prototype.checkInitialConf = function() {
        var _this = this;
        return $.ajax({
          url: '/_config/get',
          type: 'POST',
          data: 'section=logzen&option=configured',
          dataType: 'json',
          success: function(result) {
            return _this.configured(result.value.toLowerCase() === "true");
          }
        });
      };

      VM.prototype.remove_evlist = function(evlist) {
        return this.evlists.remove(evlist);
      };

      VM.prototype.add_evlist = function() {
        return this.evlists.push({
          id: +(new Date()),
          title: ko.observable('New Tab')
        });
      };

      return VM;

    })();
    vm = new VM;
    pager.extendWithPage(vm);
    ko.applyBindings(vm);
    vm.checkInitialConf();
    pager.onBindingError.add(function(event) {
      var page;
      console.log(event);
      page = event.page;
      return $(page.element).empty().append('<div class="alert"> Error Loading Page</div>');
    });
    return pager.start();
  });

}).call(this);
