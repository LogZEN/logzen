// Generated by CoffeeScript 1.3.3

/*
Copyright 2012 Sven Reissmann <sven@0x80.io>

This file is part of pyLogView. It is licensed under the terms of the
GNU General Public License version 3. See <http://www.gnu.org/licenses/>.
*/


(function() {
  var EventModel, LatestEvents, LatestEventsView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  EventModel = (function() {

    function EventModel(data) {
      this.time = $.humanize("datetime", data._source.time);
      this.facility = data._source.facility;
      this.severity = data._source.severity;
      this.host = data._source.host;
      this.program = data._source.program;
      this.message = data._source.message;
    }

    return EventModel;

  })();

  LatestEvents = (function() {

    function LatestEvents() {
      this.load = __bind(this.load, this);

      this.update = __bind(this.update, this);

      var _this = this;
      this.loading = ko.observable(false);
      this.events = ko.observableArray([]);
      this.severitySelected = ko.observable(7);
      this.severitySelectedLabel = ko.computed(function() {
        switch (_this.severitySelected()) {
          case 1:
            return "Alert and above";
          case 2:
            return "Critical and above";
          case 3:
            return "Error and above";
          case 4:
            return "Warning and above";
          case 5:
            return "Notice and above";
          case 6:
            return "Info and above";
          default:
            return "All severities";
        }
      });
      this.query = ko.computed(function() {
        return {
          "query": {
            "match_all": {}
          },
          "from": 0,
          "size": 20,
          "filter": {
            "and": [
              {
                "range": {
                  "severity": {
                    "from": 0,
                    "to": _this.severitySelected()
                  }
                }
              }
            ]
          },
          "sort": [
            {
              "time": {
                "order": "desc"
              }
            }
          ]
        };
      });
    }

    LatestEvents.prototype.update = function(severity) {
      this.severitySelected(severity);
      return LatestEventsView.load();
    };

    LatestEvents.prototype.load = function() {
      var _this = this;
      console.log(this.loading());
      if (this.loading() !== true) {
        return $.ajax({
          url: "/_api/query",
          type: 'POST',
          contentType: "application/json",
          data: JSON.stringify(this.query()),
          dataType: 'json',
          beforeSend: function() {
            return _this.loading(true);
          },
          success: function(result) {
            var event;
            _this.events((function() {
              var _i, _len, _ref, _results;
              _ref = result.hits.hits;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                event = _ref[_i];
                _results.push(new EventModel(event));
              }
              return _results;
            })());
            return _this.loading(false);
          },
          error: function(jqXHR, status, error) {
            return _this.loading(false);
          }
        });
      }
    };

    return LatestEvents;

  })();

  LatestEventsView = new LatestEvents;

  LatestEventsView.load();

  setInterval(LatestEventsView.load, 5000);

  ko.applyBindings(LatestEventsView, $('#widget_latestevents').get(0));

}).call(this);
