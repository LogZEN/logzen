// Generated by CoffeeScript 1.7.1

/*
Copyright 2013 Sven Reissmann <sven@0x80.io>

This file is part of LogZen. It is licensed under the terms of the
GNU General Public License version 3. See <http://www.gnu.org/licenses/>.
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['jquery', 'knockout', 'ko_mapping', 'vars', 'gridster'], function($, ko, mapping, vars) {
    var DashboardModel, WidgetModel;
    ko.bindingHandlers.gridster = {
      init: (function(_this) {
        return function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
          var addWidget, deleteWidget, elements, gridster, list, n, template, value, widget, _i, _j, _len, _len1, _ref, _ref1;
          value = ko.utils.unwrapObservable(valueAccessor());
          template = $('<li>');
          _ref = ko.utils.makeArray(ko.virtualElements.childNodes(element));
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            n = _ref[_i];
            template.append(ko.cleanNode(n));
          }
          list = $('<ul style="list-style: none outside none">');
          $(element).append(list);
          $(element).addClass('gridster');
          gridster = $(list).gridster(ko.utils.unwrapObservable(value.options)).data('gridster');
          elements = {};
          addWidget = function(widget) {
            var e, widgetBindingContext, _ref1, _ref2, _ref3, _ref4;
            e = gridster.add_widget($(template).clone(), ko.utils.unwrapObservable((_ref1 = widget.coords) != null ? _ref1.size_x : void 0, ko.utils.unwrapObservable((_ref2 = widget.coords) != null ? _ref2.size_y : void 0, ko.utils.unwrapObservable((_ref3 = widget.coords) != null ? _ref3.col : void 0, ko.utils.unwrapObservable((_ref4 = widget.coords) != null ? _ref4.row : void 0))))).get(0);
            elements[widget] = e;
            widgetBindingContext = bindingContext.createChildContext(ko.utils.unwrapObservable(widget));
            return ko.applyBindingsToDescendants(widgetBindingContext, e);
          };
          deleteWidget = function(widget) {
            var e;
            e = elements[widget];
            gridster.remove_widget(e);
            return delete elements[widget];
          };
          _ref1 = ko.utils.unwrapObservable(value.widgets);
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            widget = _ref1[_j];
            addWidget(widget);
          }
          return value.widgets.subscribe(function(changes) {
            var change, _k, _len2, _results;
            _results = [];
            for (_k = 0, _len2 = changes.length; _k < _len2; _k++) {
              change = changes[_k];
              switch (change.status) {
                case 'added':
                  _results.push(addWidget(change.value));
                  break;
                case 'deleted':
                  _results.push(deleteWidget(change.value));
                  break;
                default:
                  _results.push(console.log('Unhandled change status:', change));
              }
            }
            return _results;
          }, null, 'arrayChange');
        };
      })(this),
      controlsDescendantBindings: true
    };
    ko.bindingHandlers.require = {
      update: (function(_this) {
        return function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
          var value;
          value = ko.utils.unwrapObservable(valueAccessor());
          require(["" + value + ".js", "text!" + value + ".html"], function(vm, html) {
            var childBindingContext;
            ko.utils.setHtml(element, html);
            if (vm != null) {
              childBindingContext = bindingContext.createChildContext(vm());
              return ko.applyBindingsToDescendants(childBindingContext, element);
            }
          });
          return {
            controlsDescendantBindings: true
          };
        };
      })(this)
    };
    WidgetModel = (function() {
      function WidgetModel(r) {
        this.configure = __bind(this.configure, this);
        this.title = ko.observable(r.title);
        this.type = ko.observable(r.type);
        this.coords = {
          col: ko.observable(r.col),
          row: ko.observable(r.row),
          size_x: ko.observable(r.size_x),
          size_y: ko.observable(r.size_y)
        };
        this.configuring = ko.observable(false);
        this.viewPath = ko.computed((function(_this) {
          return function() {
            return "/pages/dashboard/widgets/" + (_this.type()) + "/view";
          };
        })(this));
        this.configPath = ko.computed((function(_this) {
          return function() {
            return "/pages/dashboard/widgets/" + (_this.type()) + "/config";
          };
        })(this));
      }

      WidgetModel.prototype.configure = function() {
        return this.configuring(true);
      };

      return WidgetModel;

    })();
    DashboardModel = (function() {
      function DashboardModel() {
        this.widgets = ko.observableArray([]);
        this.gridster = null;
        $.ajax({
          url: '/_config/dashboard',
          dataType: 'json',
          success: (function(_this) {
            return function(result) {
              var r, _i, _len, _results;
              console.log(result);
              _results = [];
              for (_i = 0, _len = result.length; _i < _len; _i++) {
                r = result[_i];
                _results.push(_this.widgets.push(new WidgetModel(r)));
              }
              return _results;
            };
          })(this)
        });
      }

      return DashboardModel;

    })();
    return DashboardModel;
  });

}).call(this);
