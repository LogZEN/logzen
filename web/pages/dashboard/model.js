// Generated by CoffeeScript 1.6.3
/*
Copyright 2013 Sven Reissmann <sven@0x80.io>

This file is part of LogZen. It is licensed under the terms of the
GNU General Public License version 3. See <http://www.gnu.org/licenses/>.
*/


(function() {
  define(['jquery', 'knockout', 'ko_mapping', 'pager', 'vars', 'bootstrap', 'gridster'], function($, ko, mapping, pager, vars) {
    var DashboardModel,
      _this = this;
    ko.bindingHandlers.widget = {
      init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var childBindingContext, value;
        value = ko.utils.unwrapObservable(valueAccessor());
        ko.utils.setHtml(element, value.html);
        childBindingContext = bindingContext.createChildContext(value.vm);
        console.log(childBindingContext);
        ko.applyBindingsToDescendants(childBindingContext, element);
        return {
          controlsDescendantBindings: true
        };
      }
    };
    DashboardModel = (function() {
      function DashboardModel() {
        var g,
          _this = this;
        this.widgetModels = [];
        this.layout = ko.observableArray([]);
        g = $(".gridster ul").gridster({
          widget_margins: [10, 10],
          widget_base_dimensions: [160, 160]
        }).data('gridster');
        $.ajax({
          url: '/_config/dashboard/layout',
          dataType: 'json',
          success: function(result) {
            var r, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = result.length; _i < _len; _i++) {
              r = result[_i];
              _results.push($.ajax({
                url: "/_config/dashboard/config?name=" + r.wid,
                dataType: 'json',
                success: function(result) {
                  console.log(result);
                  return require(["/pages/widget/" + result.type + "/model.js", "text!/pages/widget/" + result.type + "/view.html"], function(vm, html) {
                    console.log(r.wid);
                    vm = new vm();
                    _this.layout.push({
                      id: r.wid,
                      layout: r,
                      vm: vm,
                      html: html
                    });
                    _this.widgetModels[r.wid] = {
                      vm: vm,
                      html: html
                    };
                    return g.add_widget('<li class="new" data-bind="template: {name: \'template_widget\', data: \'' + r.wid + '\'}"></li>', 2, 1);
                  });
                }
              }));
            }
            return _results;
          }
        });
      }

      return DashboardModel;

    })();
    return DashboardModel;
  });

}).call(this);
