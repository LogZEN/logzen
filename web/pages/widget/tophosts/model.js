// Generated by CoffeeScript 1.6.3
/*
Copyright 2012 Sven Reissmann <sven@0x80.io>

This file is part of LogZen. It is licensed under the terms of the
GNU General Public License version 3. See <http://www.gnu.org/licenses/>.
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['jquery', 'knockout', 'pager', 'vars', 'bootstrap'], function($, ko, pager, vars) {
    var TopHosts;
    TopHosts = (function() {
      function TopHosts() {
        this.updateRange = __bind(this.updateRange, this);
        var _this = this;
        this.rangeSelected = ko.observable(1);
        this.rangeSelectedLabel = ko.computed(function() {
          switch (_this.rangeSelected()) {
            case 1:
              return 'last day';
            case 7:
              return 'last week';
            case 30:
              return 'last month';
            case 365:
              return 'last year';
          }
        });
        this.qry = ko.computed(function() {
          var from, now;
          now = new Date();
          from = new Date(now.getFullYear(), now.getMonth(), now.getDate() - _this.rangeSelected(), now.getHours(), now.getMinutes(), now.getSeconds(), 0);
          return {
            'query': {
              'match_all': {}
            },
            'from': 0,
            'size': 0,
            'facets': {
              'byhost': {
                'terms': {
                  'field': 'host'
                },
                'facet_filter': {
                  'range': {
                    'time': {
                      'from': from,
                      'to': now
                    }
                  }
                }
              }
            }
          };
        });
      }

      TopHosts.prototype.updateRange = function(range) {
        this.rangeSelected(range);
        return TopHostsView.load();
      };

      TopHosts.prototype.load = function() {
        var _this = this;
        return $.ajax({
          url: '/_api/query',
          dataType: 'json',
          type: 'POST',
          contentType: 'application/json',
          data: JSON.stringify(this.qry()),
          success: function(result) {
            var chart1, chart2, chart_data, data, next;
            if (result.facets.byhost.terms.length) {
              data = (function() {
                var _i, _len, _ref, _results;
                _ref = result.facets.byhost.terms;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  next = _ref[_i];
                  _results.push({
                    label: next['term'],
                    value: next['count']
                  });
                }
                return _results;
              })();
            } else {
              data = [
                {
                  label: 0,
                  value: 0
                }
              ];
            }
            chart_data = [
              {
                key: 'events',
                values: data
              }
            ];
            chart1 = nv.models.pieChart().x(function(d) {
              return d.label;
            }).y(function(d) {
              return d.value;
            }).showLabels(true);
            d3.select('#events_by_host svg').datum(chart_data).transition().duration(200).call(chart1);
            chart2 = nv.models.discreteBarChart().x(function(d) {
              return d.label;
            }).y(function(d) {
              return d.value;
            }).staggerLabels(true);
            d3.select('#top_hosts svg').datum(chart_data).transition().duration(200).call(chart2);
            nv.utils.windowResize(chart1.update);
            return nv.utils.windowResize(chart2.update);
          }
        });
      };

      return TopHosts;

    })();
    return TopHosts;
  });

}).call(this);
